
lab3_xuong_mach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be8  08002be8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be8  08002be8  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be8  08002be8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000002c  08002c1c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002c1c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c9c  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccd  00000000  00000000  00029cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001723f  00000000  00000000  0002cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c050  00000000  00000000  00043f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849cd  00000000  00000000  0004ffd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d49a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002834  00000000  00000000  000d49f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bac 	.word	0x08002bac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002bac 	.word	0x08002bac

0800014c <display7SEG_0>:
 */

#include "main.h"
#include "7seg.h"

void display7SEG_0(int number){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8194 	bhi.w	8000484 <display7SEG_0+0x338>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG_0+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d9 	.word	0x080001d9
 800016c:	08000225 	.word	0x08000225
 8000170:	08000271 	.word	0x08000271
 8000174:	080002bd 	.word	0x080002bd
 8000178:	08000309 	.word	0x08000309
 800017c:	08000355 	.word	0x08000355
 8000180:	080003a1 	.word	0x080003a1
 8000184:	080003ed 	.word	0x080003ed
 8000188:	08000439 	.word	0x08000439
	switch(number){
		case 0:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2108      	movs	r1, #8
 8000190:	48bf      	ldr	r0, [pc, #764]	; (8000490 <display7SEG_0+0x344>)
 8000192:	f001 fcec 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2104      	movs	r1, #4
 800019a:	48bd      	ldr	r0, [pc, #756]	; (8000490 <display7SEG_0+0x344>)
 800019c:	f001 fce7 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	48ba      	ldr	r0, [pc, #744]	; (8000490 <display7SEG_0+0x344>)
 80001a8:	f001 fce1 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2110      	movs	r1, #16
 80001b0:	48b8      	ldr	r0, [pc, #736]	; (8000494 <display7SEG_0+0x348>)
 80001b2:	f001 fcdc 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, RESET);
 80001b6:	2200      	movs	r2, #0
 80001b8:	2108      	movs	r1, #8
 80001ba:	48b7      	ldr	r0, [pc, #732]	; (8000498 <display7SEG_0+0x34c>)
 80001bc:	f001 fcd7 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	48b4      	ldr	r0, [pc, #720]	; (8000498 <display7SEG_0+0x34c>)
 80001c6:	f001 fcd2 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, SET);
 80001ca:	2201      	movs	r2, #1
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	48b1      	ldr	r0, [pc, #708]	; (8000498 <display7SEG_0+0x34c>)
 80001d2:	f001 fccc 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80001d6:	e156      	b.n	8000486 <display7SEG_0+0x33a>
		case 1:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2108      	movs	r1, #8
 80001dc:	48ac      	ldr	r0, [pc, #688]	; (8000490 <display7SEG_0+0x344>)
 80001de:	f001 fcc6 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2104      	movs	r1, #4
 80001e6:	48aa      	ldr	r0, [pc, #680]	; (8000490 <display7SEG_0+0x344>)
 80001e8:	f001 fcc1 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f2:	48a7      	ldr	r0, [pc, #668]	; (8000490 <display7SEG_0+0x344>)
 80001f4:	f001 fcbb 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2110      	movs	r1, #16
 80001fc:	48a5      	ldr	r0, [pc, #660]	; (8000494 <display7SEG_0+0x348>)
 80001fe:	f001 fcb6 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2108      	movs	r1, #8
 8000206:	48a4      	ldr	r0, [pc, #656]	; (8000498 <display7SEG_0+0x34c>)
 8000208:	f001 fcb1 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, SET);
 800020c:	2201      	movs	r2, #1
 800020e:	2120      	movs	r1, #32
 8000210:	48a1      	ldr	r0, [pc, #644]	; (8000498 <display7SEG_0+0x34c>)
 8000212:	f001 fcac 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, SET);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	489e      	ldr	r0, [pc, #632]	; (8000498 <display7SEG_0+0x34c>)
 800021e:	f001 fca6 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000222:	e130      	b.n	8000486 <display7SEG_0+0x33a>
		case 2:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2108      	movs	r1, #8
 8000228:	4899      	ldr	r0, [pc, #612]	; (8000490 <display7SEG_0+0x344>)
 800022a:	f001 fca0 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2104      	movs	r1, #4
 8000232:	4897      	ldr	r0, [pc, #604]	; (8000490 <display7SEG_0+0x344>)
 8000234:	f001 fc9b 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, SET);
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800023e:	4894      	ldr	r0, [pc, #592]	; (8000490 <display7SEG_0+0x344>)
 8000240:	f001 fc95 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4892      	ldr	r0, [pc, #584]	; (8000494 <display7SEG_0+0x348>)
 800024a:	f001 fc90 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2108      	movs	r1, #8
 8000252:	4891      	ldr	r0, [pc, #580]	; (8000498 <display7SEG_0+0x34c>)
 8000254:	f001 fc8b 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2120      	movs	r1, #32
 800025c:	488e      	ldr	r0, [pc, #568]	; (8000498 <display7SEG_0+0x34c>)
 800025e:	f001 fc86 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000268:	488b      	ldr	r0, [pc, #556]	; (8000498 <display7SEG_0+0x34c>)
 800026a:	f001 fc80 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800026e:	e10a      	b.n	8000486 <display7SEG_0+0x33a>
		case 3:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2108      	movs	r1, #8
 8000274:	4886      	ldr	r0, [pc, #536]	; (8000490 <display7SEG_0+0x344>)
 8000276:	f001 fc7a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2104      	movs	r1, #4
 800027e:	4884      	ldr	r0, [pc, #528]	; (8000490 <display7SEG_0+0x344>)
 8000280:	f001 fc75 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	4881      	ldr	r0, [pc, #516]	; (8000490 <display7SEG_0+0x344>)
 800028c:	f001 fc6f 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2110      	movs	r1, #16
 8000294:	487f      	ldr	r0, [pc, #508]	; (8000494 <display7SEG_0+0x348>)
 8000296:	f001 fc6a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2108      	movs	r1, #8
 800029e:	487e      	ldr	r0, [pc, #504]	; (8000498 <display7SEG_0+0x34c>)
 80002a0:	f001 fc65 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	2120      	movs	r1, #32
 80002a8:	487b      	ldr	r0, [pc, #492]	; (8000498 <display7SEG_0+0x34c>)
 80002aa:	f001 fc60 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	4878      	ldr	r0, [pc, #480]	; (8000498 <display7SEG_0+0x34c>)
 80002b6:	f001 fc5a 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80002ba:	e0e4      	b.n	8000486 <display7SEG_0+0x33a>
		case 4:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2108      	movs	r1, #8
 80002c0:	4873      	ldr	r0, [pc, #460]	; (8000490 <display7SEG_0+0x344>)
 80002c2:	f001 fc54 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2104      	movs	r1, #4
 80002ca:	4871      	ldr	r0, [pc, #452]	; (8000490 <display7SEG_0+0x344>)
 80002cc:	f001 fc4f 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	486e      	ldr	r0, [pc, #440]	; (8000490 <display7SEG_0+0x344>)
 80002d8:	f001 fc49 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	486c      	ldr	r0, [pc, #432]	; (8000494 <display7SEG_0+0x348>)
 80002e2:	f001 fc44 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2108      	movs	r1, #8
 80002ea:	486b      	ldr	r0, [pc, #428]	; (8000498 <display7SEG_0+0x34c>)
 80002ec:	f001 fc3f 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2120      	movs	r1, #32
 80002f4:	4868      	ldr	r0, [pc, #416]	; (8000498 <display7SEG_0+0x34c>)
 80002f6:	f001 fc3a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000300:	4865      	ldr	r0, [pc, #404]	; (8000498 <display7SEG_0+0x34c>)
 8000302:	f001 fc34 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000306:	e0be      	b.n	8000486 <display7SEG_0+0x33a>
		case 5:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2108      	movs	r1, #8
 800030c:	4860      	ldr	r0, [pc, #384]	; (8000490 <display7SEG_0+0x344>)
 800030e:	f001 fc2e 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2104      	movs	r1, #4
 8000316:	485e      	ldr	r0, [pc, #376]	; (8000490 <display7SEG_0+0x344>)
 8000318:	f001 fc29 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000322:	485b      	ldr	r0, [pc, #364]	; (8000490 <display7SEG_0+0x344>)
 8000324:	f001 fc23 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2110      	movs	r1, #16
 800032c:	4859      	ldr	r0, [pc, #356]	; (8000494 <display7SEG_0+0x348>)
 800032e:	f001 fc1e 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, SET);
 8000332:	2201      	movs	r2, #1
 8000334:	2108      	movs	r1, #8
 8000336:	4858      	ldr	r0, [pc, #352]	; (8000498 <display7SEG_0+0x34c>)
 8000338:	f001 fc19 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	4855      	ldr	r0, [pc, #340]	; (8000498 <display7SEG_0+0x34c>)
 8000342:	f001 fc14 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034c:	4852      	ldr	r0, [pc, #328]	; (8000498 <display7SEG_0+0x34c>)
 800034e:	f001 fc0e 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000352:	e098      	b.n	8000486 <display7SEG_0+0x33a>
		case 6:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	484d      	ldr	r0, [pc, #308]	; (8000490 <display7SEG_0+0x344>)
 800035a:	f001 fc08 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2104      	movs	r1, #4
 8000362:	484b      	ldr	r0, [pc, #300]	; (8000490 <display7SEG_0+0x344>)
 8000364:	f001 fc03 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036e:	4848      	ldr	r0, [pc, #288]	; (8000490 <display7SEG_0+0x344>)
 8000370:	f001 fbfd 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2110      	movs	r1, #16
 8000378:	4846      	ldr	r0, [pc, #280]	; (8000494 <display7SEG_0+0x348>)
 800037a:	f001 fbf8 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2108      	movs	r1, #8
 8000382:	4845      	ldr	r0, [pc, #276]	; (8000498 <display7SEG_0+0x34c>)
 8000384:	f001 fbf3 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2120      	movs	r1, #32
 800038c:	4842      	ldr	r0, [pc, #264]	; (8000498 <display7SEG_0+0x34c>)
 800038e:	f001 fbee 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000398:	483f      	ldr	r0, [pc, #252]	; (8000498 <display7SEG_0+0x34c>)
 800039a:	f001 fbe8 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800039e:	e072      	b.n	8000486 <display7SEG_0+0x33a>
		case 7:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2108      	movs	r1, #8
 80003a4:	483a      	ldr	r0, [pc, #232]	; (8000490 <display7SEG_0+0x344>)
 80003a6:	f001 fbe2 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2104      	movs	r1, #4
 80003ae:	4838      	ldr	r0, [pc, #224]	; (8000490 <display7SEG_0+0x344>)
 80003b0:	f001 fbdd 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ba:	4835      	ldr	r0, [pc, #212]	; (8000490 <display7SEG_0+0x344>)
 80003bc:	f001 fbd7 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2110      	movs	r1, #16
 80003c4:	4833      	ldr	r0, [pc, #204]	; (8000494 <display7SEG_0+0x348>)
 80003c6:	f001 fbd2 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2108      	movs	r1, #8
 80003ce:	4832      	ldr	r0, [pc, #200]	; (8000498 <display7SEG_0+0x34c>)
 80003d0:	f001 fbcd 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2120      	movs	r1, #32
 80003d8:	482f      	ldr	r0, [pc, #188]	; (8000498 <display7SEG_0+0x34c>)
 80003da:	f001 fbc8 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e4:	482c      	ldr	r0, [pc, #176]	; (8000498 <display7SEG_0+0x34c>)
 80003e6:	f001 fbc2 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80003ea:	e04c      	b.n	8000486 <display7SEG_0+0x33a>
		case 8:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2108      	movs	r1, #8
 80003f0:	4827      	ldr	r0, [pc, #156]	; (8000490 <display7SEG_0+0x344>)
 80003f2:	f001 fbbc 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2104      	movs	r1, #4
 80003fa:	4825      	ldr	r0, [pc, #148]	; (8000490 <display7SEG_0+0x344>)
 80003fc:	f001 fbb7 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000406:	4822      	ldr	r0, [pc, #136]	; (8000490 <display7SEG_0+0x344>)
 8000408:	f001 fbb1 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2110      	movs	r1, #16
 8000410:	4820      	ldr	r0, [pc, #128]	; (8000494 <display7SEG_0+0x348>)
 8000412:	f001 fbac 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2108      	movs	r1, #8
 800041a:	481f      	ldr	r0, [pc, #124]	; (8000498 <display7SEG_0+0x34c>)
 800041c:	f001 fba7 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2120      	movs	r1, #32
 8000424:	481c      	ldr	r0, [pc, #112]	; (8000498 <display7SEG_0+0x34c>)
 8000426:	f001 fba2 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	4819      	ldr	r0, [pc, #100]	; (8000498 <display7SEG_0+0x34c>)
 8000432:	f001 fb9c 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000436:	e026      	b.n	8000486 <display7SEG_0+0x33a>
		case 9:
			HAL_GPIO_WritePin(A_0_GPIO_Port, A_0_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4814      	ldr	r0, [pc, #80]	; (8000490 <display7SEG_0+0x344>)
 800043e:	f001 fb96 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_0_GPIO_Port, B_0_Pin, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2104      	movs	r1, #4
 8000446:	4812      	ldr	r0, [pc, #72]	; (8000490 <display7SEG_0+0x344>)
 8000448:	f001 fb91 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_0_GPIO_Port, C_0_Pin, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000452:	480f      	ldr	r0, [pc, #60]	; (8000490 <display7SEG_0+0x344>)
 8000454:	f001 fb8b 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_0_GPIO_Port, D_0_Pin, RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2110      	movs	r1, #16
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <display7SEG_0+0x348>)
 800045e:	f001 fb86 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_0_GPIO_Port, E_0_Pin, SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2108      	movs	r1, #8
 8000466:	480c      	ldr	r0, [pc, #48]	; (8000498 <display7SEG_0+0x34c>)
 8000468:	f001 fb81 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_0_GPIO_Port, F_0_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2120      	movs	r1, #32
 8000470:	4809      	ldr	r0, [pc, #36]	; (8000498 <display7SEG_0+0x34c>)
 8000472:	f001 fb7c 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_0_GPIO_Port, G_0_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	4806      	ldr	r0, [pc, #24]	; (8000498 <display7SEG_0+0x34c>)
 800047e:	f001 fb76 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000482:	e000      	b.n	8000486 <display7SEG_0+0x33a>
		default:
			break;
 8000484:	bf00      	nop
	}
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40010800 	.word	0x40010800
 8000494:	40011000 	.word	0x40011000
 8000498:	40010c00 	.word	0x40010c00

0800049c <display7SEG_1>:

void display7SEG_1(int number){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b09      	cmp	r3, #9
 80004a8:	f200 81b2 	bhi.w	8000810 <display7SEG_1+0x374>
 80004ac:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <display7SEG_1+0x18>)
 80004ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b2:	bf00      	nop
 80004b4:	080004dd 	.word	0x080004dd
 80004b8:	0800052f 	.word	0x0800052f
 80004bc:	08000581 	.word	0x08000581
 80004c0:	080005d3 	.word	0x080005d3
 80004c4:	08000625 	.word	0x08000625
 80004c8:	08000677 	.word	0x08000677
 80004cc:	080006c9 	.word	0x080006c9
 80004d0:	0800071b 	.word	0x0800071b
 80004d4:	0800076d 	.word	0x0800076d
 80004d8:	080007bf 	.word	0x080007bf
	switch(number){
		case 0:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2110      	movs	r1, #16
 80004e0:	48ce      	ldr	r0, [pc, #824]	; (800081c <display7SEG_1+0x380>)
 80004e2:	f001 fb44 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ec:	48cb      	ldr	r0, [pc, #812]	; (800081c <display7SEG_1+0x380>)
 80004ee:	f001 fb3e 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f8:	48c8      	ldr	r0, [pc, #800]	; (800081c <display7SEG_1+0x380>)
 80004fa:	f001 fb38 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000504:	48c5      	ldr	r0, [pc, #788]	; (800081c <display7SEG_1+0x380>)
 8000506:	f001 fb32 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000510:	48c3      	ldr	r0, [pc, #780]	; (8000820 <display7SEG_1+0x384>)
 8000512:	f001 fb2c 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2102      	movs	r1, #2
 800051a:	48c0      	ldr	r0, [pc, #768]	; (800081c <display7SEG_1+0x380>)
 800051c:	f001 fb27 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	48be      	ldr	r0, [pc, #760]	; (8000820 <display7SEG_1+0x384>)
 8000528:	f001 fb21 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800052c:	e171      	b.n	8000812 <display7SEG_1+0x376>
		case 1:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	48ba      	ldr	r0, [pc, #744]	; (800081c <display7SEG_1+0x380>)
 8000534:	f001 fb1b 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053e:	48b7      	ldr	r0, [pc, #732]	; (800081c <display7SEG_1+0x380>)
 8000540:	f001 fb15 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054a:	48b4      	ldr	r0, [pc, #720]	; (800081c <display7SEG_1+0x380>)
 800054c:	f001 fb0f 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000556:	48b1      	ldr	r0, [pc, #708]	; (800081c <display7SEG_1+0x380>)
 8000558:	f001 fb09 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	48af      	ldr	r0, [pc, #700]	; (8000820 <display7SEG_1+0x384>)
 8000564:	f001 fb03 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2102      	movs	r1, #2
 800056c:	48ab      	ldr	r0, [pc, #684]	; (800081c <display7SEG_1+0x380>)
 800056e:	f001 fafe 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000578:	48a9      	ldr	r0, [pc, #676]	; (8000820 <display7SEG_1+0x384>)
 800057a:	f001 faf8 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800057e:	e148      	b.n	8000812 <display7SEG_1+0x376>
		case 2:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	48a5      	ldr	r0, [pc, #660]	; (800081c <display7SEG_1+0x380>)
 8000586:	f001 faf2 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	48a2      	ldr	r0, [pc, #648]	; (800081c <display7SEG_1+0x380>)
 8000592:	f001 faec 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059c:	489f      	ldr	r0, [pc, #636]	; (800081c <display7SEG_1+0x380>)
 800059e:	f001 fae6 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a8:	489c      	ldr	r0, [pc, #624]	; (800081c <display7SEG_1+0x380>)
 80005aa:	f001 fae0 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b4:	489a      	ldr	r0, [pc, #616]	; (8000820 <display7SEG_1+0x384>)
 80005b6:	f001 fada 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2102      	movs	r1, #2
 80005be:	4897      	ldr	r0, [pc, #604]	; (800081c <display7SEG_1+0x380>)
 80005c0:	f001 fad5 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4895      	ldr	r0, [pc, #596]	; (8000820 <display7SEG_1+0x384>)
 80005cc:	f001 facf 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80005d0:	e11f      	b.n	8000812 <display7SEG_1+0x376>
		case 3:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2110      	movs	r1, #16
 80005d6:	4891      	ldr	r0, [pc, #580]	; (800081c <display7SEG_1+0x380>)
 80005d8:	f001 fac9 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e2:	488e      	ldr	r0, [pc, #568]	; (800081c <display7SEG_1+0x380>)
 80005e4:	f001 fac3 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ee:	488b      	ldr	r0, [pc, #556]	; (800081c <display7SEG_1+0x380>)
 80005f0:	f001 fabd 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fa:	4888      	ldr	r0, [pc, #544]	; (800081c <display7SEG_1+0x380>)
 80005fc:	f001 fab7 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000606:	4886      	ldr	r0, [pc, #536]	; (8000820 <display7SEG_1+0x384>)
 8000608:	f001 fab1 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	4882      	ldr	r0, [pc, #520]	; (800081c <display7SEG_1+0x380>)
 8000612:	f001 faac 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061c:	4880      	ldr	r0, [pc, #512]	; (8000820 <display7SEG_1+0x384>)
 800061e:	f001 faa6 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000622:	e0f6      	b.n	8000812 <display7SEG_1+0x376>
		case 4:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	487c      	ldr	r0, [pc, #496]	; (800081c <display7SEG_1+0x380>)
 800062a:	f001 faa0 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000634:	4879      	ldr	r0, [pc, #484]	; (800081c <display7SEG_1+0x380>)
 8000636:	f001 fa9a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	4876      	ldr	r0, [pc, #472]	; (800081c <display7SEG_1+0x380>)
 8000642:	f001 fa94 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, SET);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064c:	4873      	ldr	r0, [pc, #460]	; (800081c <display7SEG_1+0x380>)
 800064e:	f001 fa8e 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000658:	4871      	ldr	r0, [pc, #452]	; (8000820 <display7SEG_1+0x384>)
 800065a:	f001 fa88 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2102      	movs	r1, #2
 8000662:	486e      	ldr	r0, [pc, #440]	; (800081c <display7SEG_1+0x380>)
 8000664:	f001 fa83 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066e:	486c      	ldr	r0, [pc, #432]	; (8000820 <display7SEG_1+0x384>)
 8000670:	f001 fa7d 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000674:	e0cd      	b.n	8000812 <display7SEG_1+0x376>
		case 5:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	4868      	ldr	r0, [pc, #416]	; (800081c <display7SEG_1+0x380>)
 800067c:	f001 fa77 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000686:	4865      	ldr	r0, [pc, #404]	; (800081c <display7SEG_1+0x380>)
 8000688:	f001 fa71 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000692:	4862      	ldr	r0, [pc, #392]	; (800081c <display7SEG_1+0x380>)
 8000694:	f001 fa6b 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	485f      	ldr	r0, [pc, #380]	; (800081c <display7SEG_1+0x380>)
 80006a0:	f001 fa65 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	485d      	ldr	r0, [pc, #372]	; (8000820 <display7SEG_1+0x384>)
 80006ac:	f001 fa5f 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	4859      	ldr	r0, [pc, #356]	; (800081c <display7SEG_1+0x380>)
 80006b6:	f001 fa5a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <display7SEG_1+0x384>)
 80006c2:	f001 fa54 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80006c6:	e0a4      	b.n	8000812 <display7SEG_1+0x376>
		case 6:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	4853      	ldr	r0, [pc, #332]	; (800081c <display7SEG_1+0x380>)
 80006ce:	f001 fa4e 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4850      	ldr	r0, [pc, #320]	; (800081c <display7SEG_1+0x380>)
 80006da:	f001 fa48 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	484d      	ldr	r0, [pc, #308]	; (800081c <display7SEG_1+0x380>)
 80006e6:	f001 fa42 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f0:	484a      	ldr	r0, [pc, #296]	; (800081c <display7SEG_1+0x380>)
 80006f2:	f001 fa3c 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4848      	ldr	r0, [pc, #288]	; (8000820 <display7SEG_1+0x384>)
 80006fe:	f001 fa36 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	4845      	ldr	r0, [pc, #276]	; (800081c <display7SEG_1+0x380>)
 8000708:	f001 fa31 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000712:	4843      	ldr	r0, [pc, #268]	; (8000820 <display7SEG_1+0x384>)
 8000714:	f001 fa2b 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000718:	e07b      	b.n	8000812 <display7SEG_1+0x376>
		case 7:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2110      	movs	r1, #16
 800071e:	483f      	ldr	r0, [pc, #252]	; (800081c <display7SEG_1+0x380>)
 8000720:	f001 fa25 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	483c      	ldr	r0, [pc, #240]	; (800081c <display7SEG_1+0x380>)
 800072c:	f001 fa1f 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000736:	4839      	ldr	r0, [pc, #228]	; (800081c <display7SEG_1+0x380>)
 8000738:	f001 fa19 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	4836      	ldr	r0, [pc, #216]	; (800081c <display7SEG_1+0x380>)
 8000744:	f001 fa13 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	4834      	ldr	r0, [pc, #208]	; (8000820 <display7SEG_1+0x384>)
 8000750:	f001 fa0d 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2102      	movs	r1, #2
 8000758:	4830      	ldr	r0, [pc, #192]	; (800081c <display7SEG_1+0x380>)
 800075a:	f001 fa08 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000764:	482e      	ldr	r0, [pc, #184]	; (8000820 <display7SEG_1+0x384>)
 8000766:	f001 fa02 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800076a:	e052      	b.n	8000812 <display7SEG_1+0x376>
		case 8:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2110      	movs	r1, #16
 8000770:	482a      	ldr	r0, [pc, #168]	; (800081c <display7SEG_1+0x380>)
 8000772:	f001 f9fc 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <display7SEG_1+0x380>)
 800077e:	f001 f9f6 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <display7SEG_1+0x380>)
 800078a:	f001 f9f0 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4821      	ldr	r0, [pc, #132]	; (800081c <display7SEG_1+0x380>)
 8000796:	f001 f9ea 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	481f      	ldr	r0, [pc, #124]	; (8000820 <display7SEG_1+0x384>)
 80007a2:	f001 f9e4 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2102      	movs	r1, #2
 80007aa:	481c      	ldr	r0, [pc, #112]	; (800081c <display7SEG_1+0x380>)
 80007ac:	f001 f9df 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b6:	481a      	ldr	r0, [pc, #104]	; (8000820 <display7SEG_1+0x384>)
 80007b8:	f001 f9d9 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80007bc:	e029      	b.n	8000812 <display7SEG_1+0x376>
		case 9:
			HAL_GPIO_WritePin(A_1_GPIO_Port, A_1_Pin, RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2110      	movs	r1, #16
 80007c2:	4816      	ldr	r0, [pc, #88]	; (800081c <display7SEG_1+0x380>)
 80007c4:	f001 f9d3 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_1_GPIO_Port, B_1_Pin, RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4813      	ldr	r0, [pc, #76]	; (800081c <display7SEG_1+0x380>)
 80007d0:	f001 f9cd 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_1_GPIO_Port, C_1_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	4810      	ldr	r0, [pc, #64]	; (800081c <display7SEG_1+0x380>)
 80007dc:	f001 f9c7 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_1_GPIO_Port, D_1_Pin, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <display7SEG_1+0x380>)
 80007e8:	f001 f9c1 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <display7SEG_1+0x384>)
 80007f4:	f001 f9bb 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_1_GPIO_Port, F_1_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2102      	movs	r1, #2
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <display7SEG_1+0x380>)
 80007fe:	f001 f9b6 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_1_GPIO_Port, G_1_Pin, RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <display7SEG_1+0x384>)
 800080a:	f001 f9b0 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800080e:	e000      	b.n	8000812 <display7SEG_1+0x376>
		default:
			break;
 8000810:	bf00      	nop
	}
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010c00 	.word	0x40010c00
 8000820:	40010800 	.word	0x40010800

08000824 <display7SEG>:

void display7SEG(int number){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	display7SEG_0(number%10);
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <display7SEG+0x44>)
 8000830:	fb83 1302 	smull	r1, r3, r3, r2
 8000834:	1099      	asrs	r1, r3, #2
 8000836:	17d3      	asrs	r3, r2, #31
 8000838:	1ac9      	subs	r1, r1, r3
 800083a:	460b      	mov	r3, r1
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	4608      	mov	r0, r1
 8000846:	f7ff fc81 	bl	800014c <display7SEG_0>
	display7SEG_1(number/10);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <display7SEG+0x44>)
 800084e:	fb82 1203 	smull	r1, r2, r2, r3
 8000852:	1092      	asrs	r2, r2, #2
 8000854:	17db      	asrs	r3, r3, #31
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe1f 	bl	800049c <display7SEG_1>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	66666667 	.word	0x66666667

0800086c <fsm_for_input_processing>:
int mode_and_time = 0;
enum NO_OF_MODES mode = Normal_mode;

int is_press_flag[N0_OF_BUTTONS] = {0, 0, 0};

void fsm_for_input_processing(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	switch(buttonState_0){
 8000870:	4b66      	ldr	r3, [pc, #408]	; (8000a0c <fsm_for_input_processing+0x1a0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d02d      	beq.n	80008d4 <fsm_for_input_processing+0x68>
 8000878:	2b02      	cmp	r3, #2
 800087a:	dc3d      	bgt.n	80008f8 <fsm_for_input_processing+0x8c>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <fsm_for_input_processing+0x1a>
 8000880:	2b01      	cmp	r3, #1
 8000882:	d00d      	beq.n	80008a0 <fsm_for_input_processing+0x34>
 8000884:	e038      	b.n	80008f8 <fsm_for_input_processing+0x8c>
		case BUTTON_RELEASED_0:
			if(is_button_pressed(0)){
 8000886:	2000      	movs	r0, #0
 8000888:	f000 f92c 	bl	8000ae4 <is_button_pressed>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d02d      	beq.n	80008ee <fsm_for_input_processing+0x82>
				buttonState_0 = BUTTON_PRESSED_0;
 8000892:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <fsm_for_input_processing+0x1a0>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
				is_press_flag[0] = 1;
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
			}
				// INCREASE VALUE OF PORT A BY ONE UNIT
			break;
 800089e:	e026      	b.n	80008ee <fsm_for_input_processing+0x82>
		case BUTTON_PRESSED_0:
			if (!is_button_pressed(0)){
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 f91f 	bl	8000ae4 <is_button_pressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d106      	bne.n	80008ba <fsm_for_input_processing+0x4e>
				buttonState_0 = BUTTON_RELEASED_0;
 80008ac:	4b57      	ldr	r3, [pc, #348]	; (8000a0c <fsm_for_input_processing+0x1a0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
				is_press_flag[0] = 0;
 80008b2:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
				if(is_button_pressed_1s(0)){
					buttonState_0 = BUTTON_PRESSED_MORE_THAN_1_SECOND_0;
					is_press_flag[0] = 1;
				}
			}
			break;
 80008b8:	e01b      	b.n	80008f2 <fsm_for_input_processing+0x86>
				if(is_button_pressed_1s(0)){
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f92c 	bl	8000b18 <is_button_pressed_1s>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d015      	beq.n	80008f2 <fsm_for_input_processing+0x86>
					buttonState_0 = BUTTON_PRESSED_MORE_THAN_1_SECOND_0;
 80008c6:	4b51      	ldr	r3, [pc, #324]	; (8000a0c <fsm_for_input_processing+0x1a0>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	701a      	strb	r2, [r3, #0]
					is_press_flag[0] = 1;
 80008cc:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
			break;
 80008d2:	e00e      	b.n	80008f2 <fsm_for_input_processing+0x86>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND_0:
			if (!is_button_pressed(0)){
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 f905 	bl	8000ae4 <is_button_pressed>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10a      	bne.n	80008f6 <fsm_for_input_processing+0x8a>
				buttonState_0 = BUTTON_RELEASED_0;
 80008e0:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <fsm_for_input_processing+0x1a0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
				is_press_flag[0] = 0;
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
			}
			// TODO
			break;
 80008ec:	e003      	b.n	80008f6 <fsm_for_input_processing+0x8a>
			break;
 80008ee:	bf00      	nop
 80008f0:	e002      	b.n	80008f8 <fsm_for_input_processing+0x8c>
			break;
 80008f2:	bf00      	nop
 80008f4:	e000      	b.n	80008f8 <fsm_for_input_processing+0x8c>
			break;
 80008f6:	bf00      	nop
	}
	switch(buttonState_1){
 80008f8:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <fsm_for_input_processing+0x1a8>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d02d      	beq.n	800095c <fsm_for_input_processing+0xf0>
 8000900:	2b02      	cmp	r3, #2
 8000902:	dc3d      	bgt.n	8000980 <fsm_for_input_processing+0x114>
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <fsm_for_input_processing+0xa2>
 8000908:	2b01      	cmp	r3, #1
 800090a:	d00d      	beq.n	8000928 <fsm_for_input_processing+0xbc>
 800090c:	e038      	b.n	8000980 <fsm_for_input_processing+0x114>
		case BUTTON_RELEASED_1:
			if(is_button_pressed(1)){
 800090e:	2001      	movs	r0, #1
 8000910:	f000 f8e8 	bl	8000ae4 <is_button_pressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d02d      	beq.n	8000976 <fsm_for_input_processing+0x10a>
				buttonState_1 = BUTTON_PRESSED_1;
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <fsm_for_input_processing+0x1a8>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
				is_press_flag[1] = 1;
 8000920:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 8000922:	2201      	movs	r2, #1
 8000924:	605a      	str	r2, [r3, #4]
			}
				// INCREASE VALUE OF PORT A BY ONE UNIT
			break;
 8000926:	e026      	b.n	8000976 <fsm_for_input_processing+0x10a>
		case BUTTON_PRESSED_1:
			if (!is_button_pressed(1)){
 8000928:	2001      	movs	r0, #1
 800092a:	f000 f8db 	bl	8000ae4 <is_button_pressed>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d106      	bne.n	8000942 <fsm_for_input_processing+0xd6>
				buttonState_1 = BUTTON_RELEASED_1;
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <fsm_for_input_processing+0x1a8>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
				is_press_flag[1] = 0;
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
				if(is_button_pressed_1s(1)){
					buttonState_1 = BUTTON_PRESSED_MORE_THAN_1_SECOND_1;
					is_press_flag[1] = 1;
				}
			}
			break;
 8000940:	e01b      	b.n	800097a <fsm_for_input_processing+0x10e>
				if(is_button_pressed_1s(1)){
 8000942:	2001      	movs	r0, #1
 8000944:	f000 f8e8 	bl	8000b18 <is_button_pressed_1s>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d015      	beq.n	800097a <fsm_for_input_processing+0x10e>
					buttonState_1 = BUTTON_PRESSED_MORE_THAN_1_SECOND_1;
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <fsm_for_input_processing+0x1a8>)
 8000950:	2202      	movs	r2, #2
 8000952:	701a      	strb	r2, [r3, #0]
					is_press_flag[1] = 1;
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 8000956:	2201      	movs	r2, #1
 8000958:	605a      	str	r2, [r3, #4]
			break;
 800095a:	e00e      	b.n	800097a <fsm_for_input_processing+0x10e>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND_1:
			if (!is_button_pressed(1)){
 800095c:	2001      	movs	r0, #1
 800095e:	f000 f8c1 	bl	8000ae4 <is_button_pressed>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10a      	bne.n	800097e <fsm_for_input_processing+0x112>
				buttonState_1 = BUTTON_RELEASED_1;
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <fsm_for_input_processing+0x1a8>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
				is_press_flag[1] = 0;
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
			}
			// TODO
			break;
 8000974:	e003      	b.n	800097e <fsm_for_input_processing+0x112>
			break;
 8000976:	bf00      	nop
 8000978:	e002      	b.n	8000980 <fsm_for_input_processing+0x114>
			break;
 800097a:	bf00      	nop
 800097c:	e000      	b.n	8000980 <fsm_for_input_processing+0x114>
			break;
 800097e:	bf00      	nop
	}
	switch(buttonState_2){
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <fsm_for_input_processing+0x1ac>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d02d      	beq.n	80009e4 <fsm_for_input_processing+0x178>
 8000988:	2b02      	cmp	r3, #2
 800098a:	dc3d      	bgt.n	8000a08 <fsm_for_input_processing+0x19c>
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <fsm_for_input_processing+0x12a>
 8000990:	2b01      	cmp	r3, #1
 8000992:	d00d      	beq.n	80009b0 <fsm_for_input_processing+0x144>
				is_press_flag[2] = 0;
			}
			// TODO
			break;
	}
}
 8000994:	e038      	b.n	8000a08 <fsm_for_input_processing+0x19c>
			if(is_button_pressed(2)){
 8000996:	2002      	movs	r0, #2
 8000998:	f000 f8a4 	bl	8000ae4 <is_button_pressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d02d      	beq.n	80009fe <fsm_for_input_processing+0x192>
				buttonState_2 = BUTTON_PRESSED_2;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <fsm_for_input_processing+0x1ac>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
				is_press_flag[2] = 1;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	609a      	str	r2, [r3, #8]
			break;
 80009ae:	e026      	b.n	80009fe <fsm_for_input_processing+0x192>
			if (!is_button_pressed(2)){
 80009b0:	2002      	movs	r0, #2
 80009b2:	f000 f897 	bl	8000ae4 <is_button_pressed>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d106      	bne.n	80009ca <fsm_for_input_processing+0x15e>
				buttonState_2 = BUTTON_RELEASED_2;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <fsm_for_input_processing+0x1ac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
				is_press_flag[2] = 0;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
			break;
 80009c8:	e01b      	b.n	8000a02 <fsm_for_input_processing+0x196>
				if(is_button_pressed_1s(2)){
 80009ca:	2002      	movs	r0, #2
 80009cc:	f000 f8a4 	bl	8000b18 <is_button_pressed_1s>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d015      	beq.n	8000a02 <fsm_for_input_processing+0x196>
					buttonState_2 = BUTTON_PRESSED_MORE_THAN_1_SECOND_2;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <fsm_for_input_processing+0x1ac>)
 80009d8:	2202      	movs	r2, #2
 80009da:	701a      	strb	r2, [r3, #0]
					is_press_flag[2] = 1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 80009de:	2201      	movs	r2, #1
 80009e0:	609a      	str	r2, [r3, #8]
			break;
 80009e2:	e00e      	b.n	8000a02 <fsm_for_input_processing+0x196>
			if (!is_button_pressed(2)){
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 f87d 	bl	8000ae4 <is_button_pressed>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10a      	bne.n	8000a06 <fsm_for_input_processing+0x19a>
				buttonState_2 = BUTTON_RELEASED_2;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <fsm_for_input_processing+0x1ac>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
				is_press_flag[2] = 0;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <fsm_for_input_processing+0x1a4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
			break;
 80009fc:	e003      	b.n	8000a06 <fsm_for_input_processing+0x19a>
			break;
 80009fe:	bf00      	nop
 8000a00:	e002      	b.n	8000a08 <fsm_for_input_processing+0x19c>
			break;
 8000a02:	bf00      	nop
 8000a04:	e000      	b.n	8000a08 <fsm_for_input_processing+0x19c>
			break;
 8000a06:	bf00      	nop
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000048 	.word	0x20000048
 8000a10:	20000054 	.word	0x20000054
 8000a14:	20000049 	.word	0x20000049
 8000a18:	2000004a 	.word	0x2000004a

08000a1c <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
uint16_t BUTTON[N0_OF_BUTTONS] = {BUTTON_0_Pin, BUTTON_1_Pin, BUTTON_2_Pin};
void button_reading (void){
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
	for (char i = 0; i < N0_OF_BUTTONS; i++){
 8000a22:	2300      	movs	r3, #0
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	e046      	b.n	8000ab6 <button_reading+0x9a>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4926      	ldr	r1, [pc, #152]	; (8000ac8 <button_reading+0xac>)
 8000a2e:	5c89      	ldrb	r1, [r1, r2]
 8000a30:	4a26      	ldr	r2, [pc, #152]	; (8000acc <button_reading+0xb0>)
 8000a32:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port , BUTTON[i]);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <button_reading+0xb4>)
 8000a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a3c:	79fc      	ldrb	r4, [r7, #7]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <button_reading+0xb8>)
 8000a42:	f001 f87d 	bl	8001b40 <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <button_reading+0xac>)
 8000a4c:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <button_reading+0xac>)
 8000a52:	5cd2      	ldrb	r2, [r2, r3]
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	491d      	ldr	r1, [pc, #116]	; (8000acc <button_reading+0xb0>)
 8000a58:	5ccb      	ldrb	r3, [r1, r3]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d105      	bne.n	8000a6a <button_reading+0x4e>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	4919      	ldr	r1, [pc, #100]	; (8000ac8 <button_reading+0xac>)
 8000a64:	5c89      	ldrb	r1, [r1, r2]
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <button_reading+0xbc>)
 8000a68:	54d1      	strb	r1, [r2, r3]

		if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <button_reading+0xbc>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d114      	bne.n	8000a9e <button_reading+0x82>
			// if a button is pressed , we start counting
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <button_reading+0xc0>)
 8000a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7c:	2b63      	cmp	r3, #99	; 0x63
 8000a7e:	d809      	bhi.n	8000a94 <button_reading+0x78>
				counterForButtonPress1s[i]++;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <button_reading+0xc0>)
 8000a84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a88:	3201      	adds	r2, #1
 8000a8a:	b291      	uxth	r1, r2
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <button_reading+0xc0>)
 8000a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a92:	e00d      	b.n	8000ab0 <button_reading+0x94>
			}else{
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s[i] = 1;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <button_reading+0xc4>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	54d1      	strb	r1, [r2, r3]
 8000a9c:	e008      	b.n	8000ab0 <button_reading+0x94>
				// todo
			}
		}else{
			counterForButtonPress1s[i] = 0;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <button_reading+0xc0>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <button_reading+0xc4>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i++){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d9b5      	bls.n	8000a28 <button_reading+0xc>
		}
	}
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	20000060 	.word	0x20000060
 8000adc:	20000068 	.word	0x20000068
 8000ae0:	20000064 	.word	0x20000064

08000ae4 <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d901      	bls.n	8000af8 <is_button_pressed+0x14>
 8000af4:	2300      	movs	r3, #0
 8000af6:	e007      	b.n	8000b08 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <is_button_pressed+0x30>)
 8000afc:	5cd3      	ldrb	r3, [r2, r3]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000060 	.word	0x20000060

08000b18 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s (unsigned char index) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff ;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d901      	bls.n	8000b2c <is_button_pressed_1s+0x14>
 8000b28:	23ff      	movs	r3, #255	; 0xff
 8000b2a:	e007      	b.n	8000b3c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <is_button_pressed_1s+0x30>)
 8000b30:	5cd3      	ldrb	r3, [r2, r3]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000064 	.word	0x20000064

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 fd02 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f80c 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 f898 	bl	8000c8c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b5c:	f000 f84a 	bl	8000bf4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <main+0x20>)
 8000b62:	f001 fc49 	bl	80023f8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mode_processing();
 8000b66:	f000 f99b 	bl	8000ea0 <mode_processing>
 8000b6a:	e7fc      	b.n	8000b66 <main+0x1a>
 8000b6c:	2000008c 	.word	0x2000008c

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	2228      	movs	r2, #40	; 0x28
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f80c 	bl	8002b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ba6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fff5 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bbc:	f000 f8ec 	bl	8000d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fa60 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000be6:	f000 f8d7 	bl	8000d98 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3740      	adds	r7, #64	; 0x40
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c1a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c28:	2209      	movs	r2, #9
 8000c2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c3a:	f001 fb8d 	bl	8002358 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c44:	f000 f8a8 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c56:	f001 fd29 	bl	80026ac <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c60:	f000 f89a 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c72:	f001 feff 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f88c 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000008c 	.word	0x2000008c

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a32      	ldr	r2, [pc, #200]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a2c      	ldr	r2, [pc, #176]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_GPIO_Init+0xfc>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B_0_Pin|A_0_Pin|GPIO_PIN_5|EN_0_Pin
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8000cee:	4827      	ldr	r0, [pc, #156]	; (8000d8c <MX_GPIO_Init+0x100>)
 8000cf0:	f000 ff3d 	bl	8001b6e <HAL_GPIO_WritePin>
                          |E_1_Pin|G_1_Pin|C_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_0_Pin|TFL_01_Pin|HORN_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 7124 	mov.w	r1, #656	; 0x290
 8000cfa:	4825      	ldr	r0, [pc, #148]	; (8000d90 <MX_GPIO_Init+0x104>)
 8000cfc:	f000 ff37 	bl	8001b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_1_Pin|TFL_00_Pin|C_1_Pin|TFL_11_Pin
 8000d00:	2200      	movs	r2, #0
 8000d02:	f64f 417e 	movw	r1, #64638	; 0xfc7e
 8000d06:	4823      	ldr	r0, [pc, #140]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000d08:	f000 ff31 	bl	8001b6e <HAL_GPIO_WritePin>
                          |EN_1_Pin|G_0_Pin|B_1_Pin|D_1_Pin
                          |E_0_Pin|A_1_Pin|F_0_Pin|TFL_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_2_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_2_Pin|BUTTON_1_Pin;
 8000d0c:	230d      	movs	r3, #13
 8000d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481c      	ldr	r0, [pc, #112]	; (8000d90 <MX_GPIO_Init+0x104>)
 8000d20:	f000 fd8a 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_0_Pin A_0_Pin PA5 EN_0_Pin
                           E_1_Pin G_1_Pin C_0_Pin */
  GPIO_InitStruct.Pin = B_0_Pin|A_0_Pin|GPIO_PIN_5|EN_0_Pin
 8000d24:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8000d28:	613b      	str	r3, [r7, #16]
                          |E_1_Pin|G_1_Pin|C_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <MX_GPIO_Init+0x100>)
 8000d3e:	f000 fd7b 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_0_Pin TFL_01_Pin HORN_Pin */
  GPIO_InitStruct.Pin = D_0_Pin|TFL_01_Pin|HORN_Pin;
 8000d42:	f44f 7324 	mov.w	r3, #656	; 0x290
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x104>)
 8000d5c:	f000 fd6c 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_1_Pin TFL_00_Pin C_1_Pin TFL_11_Pin
                           EN_1_Pin G_0_Pin B_1_Pin D_1_Pin
                           E_0_Pin A_1_Pin F_0_Pin TFL_10_Pin */
  GPIO_InitStruct.Pin = F_1_Pin|TFL_00_Pin|C_1_Pin|TFL_11_Pin
 8000d60:	f64f 437e 	movw	r3, #64638	; 0xfc7e
 8000d64:	613b      	str	r3, [r7, #16]
                          |EN_1_Pin|G_0_Pin|B_1_Pin|D_1_Pin
                          |E_0_Pin|A_1_Pin|F_0_Pin|TFL_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000d7a:	f000 fd5d 	bl	8001838 <HAL_GPIO_Init>

}
 8000d7e:	bf00      	nop
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	40011000 	.word	0x40011000
 8000d94:	40010c00 	.word	0x40010c00

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <modify_red>:
#include "mode_processing.h"
#include "input_reading.h"
#include "7seg.h"
#include "input_processing.h"

void modify_red(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	if(timer0_flag == 1){
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <modify_red+0x48>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d11a      	bne.n	8000de6 <modify_red+0x42>
		HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2104      	movs	r1, #4
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <modify_red+0x4c>)
 8000db6:	f000 feda 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <modify_red+0x50>)
 8000dc0:	f000 fed5 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <modify_red+0x4c>)
 8000dca:	f000 fed0 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <modify_red+0x4c>)
 8000dd6:	f000 feca 	bl	8001b6e <HAL_GPIO_WritePin>
		seven_segment_state();
 8000dda:	f000 f919 	bl	8001010 <seven_segment_state>
		setTimer0(500);
 8000dde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de2:	f000 fabd 	bl	8001360 <setTimer0>
	}
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000088 	.word	0x20000088
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40011000 	.word	0x40011000

08000df8 <modify_yellow>:

void modify_yellow(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	if(timer0_flag == 1){
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <modify_yellow+0x48>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d11a      	bne.n	8000e3a <modify_yellow+0x42>
		HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2104      	movs	r1, #4
 8000e08:	480e      	ldr	r0, [pc, #56]	; (8000e44 <modify_yellow+0x4c>)
 8000e0a:	f000 feb0 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <modify_yellow+0x50>)
 8000e14:	f000 feab 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <modify_yellow+0x4c>)
 8000e1e:	f000 fea6 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <modify_yellow+0x4c>)
 8000e2a:	f000 fea0 	bl	8001b6e <HAL_GPIO_WritePin>
		seven_segment_state();
 8000e2e:	f000 f8ef 	bl	8001010 <seven_segment_state>
		setTimer0(500);
 8000e32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e36:	f000 fa93 	bl	8001360 <setTimer0>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000088 	.word	0x20000088
 8000e44:	40010c00 	.word	0x40010c00
 8000e48:	40011000 	.word	0x40011000

08000e4c <modify_green>:

void modify_green(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	if(timer0_flag == 1){
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <modify_green+0x48>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d11a      	bne.n	8000e8e <modify_green+0x42>
		HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	480e      	ldr	r0, [pc, #56]	; (8000e98 <modify_green+0x4c>)
 8000e5e:	f000 fe86 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <modify_green+0x50>)
 8000e68:	f000 fe81 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <modify_green+0x4c>)
 8000e72:	f000 fe7c 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <modify_green+0x4c>)
 8000e7e:	f000 fe76 	bl	8001b6e <HAL_GPIO_WritePin>
		seven_segment_state();
 8000e82:	f000 f8c5 	bl	8001010 <seven_segment_state>
		setTimer0(500);
 8000e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8a:	f000 fa69 	bl	8001360 <setTimer0>
	}
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000088 	.word	0x20000088
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40011000 	.word	0x40011000

08000ea0 <mode_processing>:

void mode_processing(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	fsm_for_input_processing();
 8000ea4:	f7ff fce2 	bl	800086c <fsm_for_input_processing>
	if(is_press_flag[0]){
 8000ea8:	4b52      	ldr	r3, [pc, #328]	; (8000ff4 <mode_processing+0x154>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d030      	beq.n	8000f12 <mode_processing+0x72>
		HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	4850      	ldr	r0, [pc, #320]	; (8000ff8 <mode_processing+0x158>)
 8000eb6:	f000 fe5a 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	484f      	ldr	r0, [pc, #316]	; (8000ffc <mode_processing+0x15c>)
 8000ec0:	f000 fe55 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	484b      	ldr	r0, [pc, #300]	; (8000ff8 <mode_processing+0x158>)
 8000eca:	f000 fe50 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed4:	4848      	ldr	r0, [pc, #288]	; (8000ff8 <mode_processing+0x158>)
 8000ed6:	f000 fe4a 	bl	8001b6e <HAL_GPIO_WritePin>
		led_time_buffer[RED] =  led_time_buffer[YELLOW] = led_time_buffer[GREEN] = 0;
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <mode_processing+0x160>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	4b47      	ldr	r3, [pc, #284]	; (8001000 <mode_processing+0x160>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a46      	ldr	r2, [pc, #280]	; (8001000 <mode_processing+0x160>)
 8000ee6:	6053      	str	r3, [r2, #4]
 8000ee8:	4b45      	ldr	r3, [pc, #276]	; (8001000 <mode_processing+0x160>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	4a44      	ldr	r2, [pc, #272]	; (8001000 <mode_processing+0x160>)
 8000eee:	6013      	str	r3, [r2, #0]
		if(++mode > 3){
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <mode_processing+0x164>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <mode_processing+0x164>)
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	4b41      	ldr	r3, [pc, #260]	; (8001004 <mode_processing+0x164>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d902      	bls.n	8000f0a <mode_processing+0x6a>
			mode = 0;
 8000f04:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <mode_processing+0x164>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
		}
		is_press_flag[0] = 0;
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <mode_processing+0x154>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e047      	b.n	8000fa2 <mode_processing+0x102>
	}else if(is_press_flag[1]){
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <mode_processing+0x154>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d021      	beq.n	8000f5e <mode_processing+0xbe>
		switch(mode){
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <mode_processing+0x164>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d012      	beq.n	8000f48 <mode_processing+0xa8>
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	dc16      	bgt.n	8000f54 <mode_processing+0xb4>
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d002      	beq.n	8000f30 <mode_processing+0x90>
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d006      	beq.n	8000f3c <mode_processing+0x9c>
				break;
			case Modify_green:
				led_time_buffer[GREEN]++;
				break;
			default:
				break;
 8000f2e:	e011      	b.n	8000f54 <mode_processing+0xb4>
				led_time_buffer[RED]++;
 8000f30:	4b33      	ldr	r3, [pc, #204]	; (8001000 <mode_processing+0x160>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a32      	ldr	r2, [pc, #200]	; (8001000 <mode_processing+0x160>)
 8000f38:	6013      	str	r3, [r2, #0]
				break;
 8000f3a:	e00c      	b.n	8000f56 <mode_processing+0xb6>
				led_time_buffer[YELLOW]++;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <mode_processing+0x160>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <mode_processing+0x160>)
 8000f44:	6053      	str	r3, [r2, #4]
				break;
 8000f46:	e006      	b.n	8000f56 <mode_processing+0xb6>
				led_time_buffer[GREEN]++;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <mode_processing+0x160>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <mode_processing+0x160>)
 8000f50:	6093      	str	r3, [r2, #8]
				break;
 8000f52:	e000      	b.n	8000f56 <mode_processing+0xb6>
				break;
 8000f54:	bf00      	nop
		}
		is_press_flag[1] = 0;
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <mode_processing+0x154>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	e021      	b.n	8000fa2 <mode_processing+0x102>
	}else if(is_press_flag[2]){
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <mode_processing+0x154>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d01d      	beq.n	8000fa2 <mode_processing+0x102>
		switch(mode){
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <mode_processing+0x164>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d010      	beq.n	8000f90 <mode_processing+0xf0>
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	dc13      	bgt.n	8000f9a <mode_processing+0xfa>
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d002      	beq.n	8000f7c <mode_processing+0xdc>
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d005      	beq.n	8000f86 <mode_processing+0xe6>
				break;
			case Modify_green:
				led_time[GREEN] = led_time_buffer[GREEN];
				break;
			default:
				break;
 8000f7a:	e00e      	b.n	8000f9a <mode_processing+0xfa>
				led_time[RED] = led_time_buffer[RED];
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <mode_processing+0x160>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <mode_processing+0x168>)
 8000f82:	6013      	str	r3, [r2, #0]
				break;
 8000f84:	e00a      	b.n	8000f9c <mode_processing+0xfc>
				led_time[YELLOW] = led_time_buffer[YELLOW];
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <mode_processing+0x160>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <mode_processing+0x168>)
 8000f8c:	6053      	str	r3, [r2, #4]
				break;
 8000f8e:	e005      	b.n	8000f9c <mode_processing+0xfc>
				led_time[GREEN] = led_time_buffer[GREEN];
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <mode_processing+0x160>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <mode_processing+0x168>)
 8000f96:	6093      	str	r3, [r2, #8]
				break;
 8000f98:	e000      	b.n	8000f9c <mode_processing+0xfc>
				break;
 8000f9a:	bf00      	nop
		}
		is_press_flag[2] = 0;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <mode_processing+0x154>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
	}
	switch(mode){
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <mode_processing+0x164>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d81e      	bhi.n	8000fe8 <mode_processing+0x148>
 8000faa:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <mode_processing+0x110>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08000fc1 	.word	0x08000fc1
 8000fb4:	08000fd7 	.word	0x08000fd7
 8000fb8:	08000fdd 	.word	0x08000fdd
 8000fbc:	08000fe3 	.word	0x08000fe3
		case Normal_mode:
			if(timer0_flag == 1){
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <mode_processing+0x16c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d111      	bne.n	8000fec <mode_processing+0x14c>
				setTimer0(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fcc:	f000 f9c8 	bl	8001360 <setTimer0>
				traffic_light();
 8000fd0:	f000 f8aa 	bl	8001128 <traffic_light>
			}
			break;
 8000fd4:	e00a      	b.n	8000fec <mode_processing+0x14c>
		case Modify_red:
			modify_red();
 8000fd6:	f7ff fee5 	bl	8000da4 <modify_red>
			break;
 8000fda:	e008      	b.n	8000fee <mode_processing+0x14e>
		case Modify_yellow:
			modify_yellow();
 8000fdc:	f7ff ff0c 	bl	8000df8 <modify_yellow>
			break;
 8000fe0:	e005      	b.n	8000fee <mode_processing+0x14e>
		case Modify_green:
			modify_green();
 8000fe2:	f7ff ff33 	bl	8000e4c <modify_green>
			break;
 8000fe6:	e002      	b.n	8000fee <mode_processing+0x14e>
		default:
			break;
 8000fe8:	bf00      	nop
 8000fea:	e000      	b.n	8000fee <mode_processing+0x14e>
			break;
 8000fec:	bf00      	nop
	}
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000054 	.word	0x20000054
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	40011000 	.word	0x40011000
 8001000:	20000070 	.word	0x20000070
 8001004:	20000050 	.word	0x20000050
 8001008:	20000010 	.word	0x20000010
 800100c:	20000088 	.word	0x20000088

08001010 <seven_segment_state>:
int led_time_buffer[3] = {0, 0, 0};
int horizontal_countdown = 0;
int vertical_countdown = 0;
int hori_verti_state = HORI;

void seven_segment_state(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	if(mode != Normal_mode){
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <seven_segment_state+0xf8>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d044      	beq.n	80010a6 <seven_segment_state+0x96>
		if(mode_and_time == 0){
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <seven_segment_state+0xfc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d12c      	bne.n	800107e <seven_segment_state+0x6e>
			switch(mode){
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <seven_segment_state+0xf8>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d012      	beq.n	8001052 <seven_segment_state+0x42>
 800102c:	2b03      	cmp	r3, #3
 800102e:	dc16      	bgt.n	800105e <seven_segment_state+0x4e>
 8001030:	2b01      	cmp	r3, #1
 8001032:	d002      	beq.n	800103a <seven_segment_state+0x2a>
 8001034:	2b02      	cmp	r3, #2
 8001036:	d006      	beq.n	8001046 <seven_segment_state+0x36>
					break;
				case Modify_green:
					display7SEG(led_time_buffer[GREEN]);
					break;
				default:
					break;
 8001038:	e011      	b.n	800105e <seven_segment_state+0x4e>
					display7SEG(led_time_buffer[RED]);
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <seven_segment_state+0x100>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fbf0 	bl	8000824 <display7SEG>
					break;
 8001044:	e00c      	b.n	8001060 <seven_segment_state+0x50>
					display7SEG(led_time_buffer[YELLOW]);
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <seven_segment_state+0x100>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fbea 	bl	8000824 <display7SEG>
					break;
 8001050:	e006      	b.n	8001060 <seven_segment_state+0x50>
					display7SEG(led_time_buffer[GREEN]);
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <seven_segment_state+0x100>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fbe4 	bl	8000824 <display7SEG>
					break;
 800105c:	e000      	b.n	8001060 <seven_segment_state+0x50>
					break;
 800105e:	bf00      	nop
			}
			HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	482b      	ldr	r0, [pc, #172]	; (8001114 <seven_segment_state+0x104>)
 8001066:	f000 fd82 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_1_GPIO_Port,EN_1_Pin, SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001070:	4829      	ldr	r0, [pc, #164]	; (8001118 <seven_segment_state+0x108>)
 8001072:	f000 fd7c 	bl	8001b6e <HAL_GPIO_WritePin>
			mode_and_time = 1;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <seven_segment_state+0xfc>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
		}
	}
}
 800107c:	e042      	b.n	8001104 <seven_segment_state+0xf4>
			display7SEG(mode);
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <seven_segment_state+0xf8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fbce 	bl	8000824 <display7SEG>
			HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <seven_segment_state+0x104>)
 800108e:	f000 fd6e 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	481f      	ldr	r0, [pc, #124]	; (8001118 <seven_segment_state+0x108>)
 800109a:	f000 fd68 	bl	8001b6e <HAL_GPIO_WritePin>
			mode_and_time = 0;
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <seven_segment_state+0xfc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	e02e      	b.n	8001104 <seven_segment_state+0xf4>
		switch(hori_verti_state){
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <seven_segment_state+0x10c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <seven_segment_state+0xa4>
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d014      	beq.n	80010dc <seven_segment_state+0xcc>
				break;
 80010b2:	e027      	b.n	8001104 <seven_segment_state+0xf4>
				display7SEG(horizontal_countdown);
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <seven_segment_state+0x110>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fbb3 	bl	8000824 <display7SEG>
				HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	4814      	ldr	r0, [pc, #80]	; (8001114 <seven_segment_state+0x104>)
 80010c4:	f000 fd53 	bl	8001b6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <seven_segment_state+0x108>)
 80010d0:	f000 fd4d 	bl	8001b6e <HAL_GPIO_WritePin>
				hori_verti_state = VERTI;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <seven_segment_state+0x10c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
				break;
 80010da:	e013      	b.n	8001104 <seven_segment_state+0xf4>
				display7SEG(vertical_countdown);
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <seven_segment_state+0x114>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fb9f 	bl	8000824 <display7SEG>
				HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <seven_segment_state+0x104>)
 80010ec:	f000 fd3f 	bl	8001b6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f6:	4808      	ldr	r0, [pc, #32]	; (8001118 <seven_segment_state+0x108>)
 80010f8:	f000 fd39 	bl	8001b6e <HAL_GPIO_WritePin>
				hori_verti_state = HORI;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <seven_segment_state+0x10c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
				break;
 8001102:	bf00      	nop
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000050 	.word	0x20000050
 800110c:	2000004c 	.word	0x2000004c
 8001110:	20000070 	.word	0x20000070
 8001114:	40010800 	.word	0x40010800
 8001118:	40010c00 	.word	0x40010c00
 800111c:	20000084 	.word	0x20000084
 8001120:	2000007c 	.word	0x2000007c
 8001124:	20000080 	.word	0x20000080

08001128 <traffic_light>:

void traffic_light(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	seven_segment_state();
 800112c:	f7ff ff70 	bl	8001010 <seven_segment_state>
	switch(light_state){
 8001130:	4b85      	ldr	r3, [pc, #532]	; (8001348 <traffic_light+0x220>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b04      	cmp	r3, #4
 8001136:	f200 80fb 	bhi.w	8001330 <traffic_light+0x208>
 800113a:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <traffic_light+0x18>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	08001197 	.word	0x08001197
 8001144:	080011fb 	.word	0x080011fb
 8001148:	08001265 	.word	0x08001265
 800114c:	080012c7 	.word	0x080012c7
 8001150:	08001155 	.word	0x08001155
		case Init:
			HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2104      	movs	r1, #4
 8001158:	487c      	ldr	r0, [pc, #496]	; (800134c <traffic_light+0x224>)
 800115a:	f000 fd08 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	487b      	ldr	r0, [pc, #492]	; (8001350 <traffic_light+0x228>)
 8001164:	f000 fd03 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	4877      	ldr	r0, [pc, #476]	; (800134c <traffic_light+0x224>)
 800116e:	f000 fcfe 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	4874      	ldr	r0, [pc, #464]	; (800134c <traffic_light+0x224>)
 800117a:	f000 fcf8 	bl	8001b6e <HAL_GPIO_WritePin>
			horizontal_countdown = led_time[RED];
 800117e:	4b75      	ldr	r3, [pc, #468]	; (8001354 <traffic_light+0x22c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	; (8001358 <traffic_light+0x230>)
 8001184:	6013      	str	r3, [r2, #0]
			vertical_countdown = led_time[GREEN];
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <traffic_light+0x22c>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4a74      	ldr	r2, [pc, #464]	; (800135c <traffic_light+0x234>)
 800118c:	6013      	str	r3, [r2, #0]
			light_state = Red_Green;
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <traffic_light+0x220>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
			break;
 8001194:	e0d5      	b.n	8001342 <traffic_light+0x21a>
		case Red_Green:
			horizontal_countdown--;
 8001196:	4b70      	ldr	r3, [pc, #448]	; (8001358 <traffic_light+0x230>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	4a6e      	ldr	r2, [pc, #440]	; (8001358 <traffic_light+0x230>)
 800119e:	6013      	str	r3, [r2, #0]
			vertical_countdown--;
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <traffic_light+0x234>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a6d      	ldr	r2, [pc, #436]	; (800135c <traffic_light+0x234>)
 80011a8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2104      	movs	r1, #4
 80011ae:	4867      	ldr	r0, [pc, #412]	; (800134c <traffic_light+0x224>)
 80011b0:	f000 fcdd 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4865      	ldr	r0, [pc, #404]	; (8001350 <traffic_light+0x228>)
 80011ba:	f000 fcd8 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2140      	movs	r1, #64	; 0x40
 80011c2:	4862      	ldr	r0, [pc, #392]	; (800134c <traffic_light+0x224>)
 80011c4:	f000 fcd3 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ce:	485f      	ldr	r0, [pc, #380]	; (800134c <traffic_light+0x224>)
 80011d0:	f000 fccd 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HORN_GPIO_Port, HORN_Pin, RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	485d      	ldr	r0, [pc, #372]	; (8001350 <traffic_light+0x228>)
 80011dc:	f000 fcc7 	bl	8001b6e <HAL_GPIO_WritePin>
			if(vertical_countdown <= 0){
 80011e0:	4b5e      	ldr	r3, [pc, #376]	; (800135c <traffic_light+0x234>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f300 80a5 	bgt.w	8001334 <traffic_light+0x20c>
				 light_state = Red_Yellow;
 80011ea:	4b57      	ldr	r3, [pc, #348]	; (8001348 <traffic_light+0x220>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
				 vertical_countdown = led_time[YELLOW];
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <traffic_light+0x22c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a59      	ldr	r2, [pc, #356]	; (800135c <traffic_light+0x234>)
 80011f6:	6013      	str	r3, [r2, #0]
			}
			break;
 80011f8:	e09c      	b.n	8001334 <traffic_light+0x20c>
		case Red_Yellow:
			horizontal_countdown--;
 80011fa:	4b57      	ldr	r3, [pc, #348]	; (8001358 <traffic_light+0x230>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a55      	ldr	r2, [pc, #340]	; (8001358 <traffic_light+0x230>)
 8001202:	6013      	str	r3, [r2, #0]
			vertical_countdown--;
 8001204:	4b55      	ldr	r3, [pc, #340]	; (800135c <traffic_light+0x234>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4a54      	ldr	r2, [pc, #336]	; (800135c <traffic_light+0x234>)
 800120c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2104      	movs	r1, #4
 8001212:	484e      	ldr	r0, [pc, #312]	; (800134c <traffic_light+0x224>)
 8001214:	f000 fcab 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	484c      	ldr	r0, [pc, #304]	; (8001350 <traffic_light+0x228>)
 800121e:	f000 fca6 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	4849      	ldr	r0, [pc, #292]	; (800134c <traffic_light+0x224>)
 8001228:	f000 fca1 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	4846      	ldr	r0, [pc, #280]	; (800134c <traffic_light+0x224>)
 8001234:	f000 fc9b 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HORN_GPIO_Port, HORN_Pin, SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123e:	4844      	ldr	r0, [pc, #272]	; (8001350 <traffic_light+0x228>)
 8001240:	f000 fc95 	bl	8001b6e <HAL_GPIO_WritePin>
			if(horizontal_countdown <= 0){
 8001244:	4b44      	ldr	r3, [pc, #272]	; (8001358 <traffic_light+0x230>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dc75      	bgt.n	8001338 <traffic_light+0x210>
				 light_state = Green_Red;
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <traffic_light+0x220>)
 800124e:	2202      	movs	r2, #2
 8001250:	701a      	strb	r2, [r3, #0]
				 horizontal_countdown = led_time[GREEN];
 8001252:	4b40      	ldr	r3, [pc, #256]	; (8001354 <traffic_light+0x22c>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4a40      	ldr	r2, [pc, #256]	; (8001358 <traffic_light+0x230>)
 8001258:	6013      	str	r3, [r2, #0]
				 vertical_countdown = led_time[RED];
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <traffic_light+0x22c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a3f      	ldr	r2, [pc, #252]	; (800135c <traffic_light+0x234>)
 8001260:	6013      	str	r3, [r2, #0]
			}
			break;
 8001262:	e069      	b.n	8001338 <traffic_light+0x210>
		case Green_Red:
			horizontal_countdown--;
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <traffic_light+0x230>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	4a3b      	ldr	r2, [pc, #236]	; (8001358 <traffic_light+0x230>)
 800126c:	6013      	str	r3, [r2, #0]
			vertical_countdown--;
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <traffic_light+0x234>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3b01      	subs	r3, #1
 8001274:	4a39      	ldr	r2, [pc, #228]	; (800135c <traffic_light+0x234>)
 8001276:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2104      	movs	r1, #4
 800127c:	4833      	ldr	r0, [pc, #204]	; (800134c <traffic_light+0x224>)
 800127e:	f000 fc76 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, SET);
 8001282:	2201      	movs	r2, #1
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	4832      	ldr	r0, [pc, #200]	; (8001350 <traffic_light+0x228>)
 8001288:	f000 fc71 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	482e      	ldr	r0, [pc, #184]	; (800134c <traffic_light+0x224>)
 8001292:	f000 fc6c 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129c:	482b      	ldr	r0, [pc, #172]	; (800134c <traffic_light+0x224>)
 800129e:	f000 fc66 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HORN_GPIO_Port, HORN_Pin, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	4829      	ldr	r0, [pc, #164]	; (8001350 <traffic_light+0x228>)
 80012aa:	f000 fc60 	bl	8001b6e <HAL_GPIO_WritePin>
			if(horizontal_countdown <= 0){
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <traffic_light+0x230>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dc42      	bgt.n	800133c <traffic_light+0x214>
				 light_state = Yellow_Red;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <traffic_light+0x220>)
 80012b8:	2203      	movs	r2, #3
 80012ba:	701a      	strb	r2, [r3, #0]
				 horizontal_countdown = led_time[YELLOW];
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <traffic_light+0x22c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <traffic_light+0x230>)
 80012c2:	6013      	str	r3, [r2, #0]
			}
			break;
 80012c4:	e03a      	b.n	800133c <traffic_light+0x214>
		case Yellow_Red:
			horizontal_countdown--;
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <traffic_light+0x230>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4a22      	ldr	r2, [pc, #136]	; (8001358 <traffic_light+0x230>)
 80012ce:	6013      	str	r3, [r2, #0]
			vertical_countdown--;
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <traffic_light+0x234>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <traffic_light+0x234>)
 80012d8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(TFL_00_GPIO_Port, TFL_00_Pin, SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	2104      	movs	r1, #4
 80012de:	481b      	ldr	r0, [pc, #108]	; (800134c <traffic_light+0x224>)
 80012e0:	f000 fc45 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_01_GPIO_Port, TFL_01_Pin, SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	4819      	ldr	r0, [pc, #100]	; (8001350 <traffic_light+0x228>)
 80012ea:	f000 fc40 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_10_GPIO_Port, TFL_10_Pin, SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	4816      	ldr	r0, [pc, #88]	; (800134c <traffic_light+0x224>)
 80012f4:	f000 fc3b 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TFL_11_GPIO_Port, TFL_11_Pin, RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fe:	4813      	ldr	r0, [pc, #76]	; (800134c <traffic_light+0x224>)
 8001300:	f000 fc35 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HORN_GPIO_Port, HORN_Pin, SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	4811      	ldr	r0, [pc, #68]	; (8001350 <traffic_light+0x228>)
 800130c:	f000 fc2f 	bl	8001b6e <HAL_GPIO_WritePin>
			if(horizontal_countdown <= 0){
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <traffic_light+0x230>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dc13      	bgt.n	8001340 <traffic_light+0x218>
				 light_state = Red_Green;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <traffic_light+0x220>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
				 horizontal_countdown = led_time[RED];
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <traffic_light+0x22c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <traffic_light+0x230>)
 8001324:	6013      	str	r3, [r2, #0]
				 vertical_countdown = led_time[GREEN];
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <traffic_light+0x22c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <traffic_light+0x234>)
 800132c:	6013      	str	r3, [r2, #0]
			}
			break;
 800132e:	e007      	b.n	8001340 <traffic_light+0x218>
		default:
			break;
 8001330:	bf00      	nop
 8001332:	e006      	b.n	8001342 <traffic_light+0x21a>
			break;
 8001334:	bf00      	nop
 8001336:	e004      	b.n	8001342 <traffic_light+0x21a>
			break;
 8001338:	bf00      	nop
 800133a:	e002      	b.n	8001342 <traffic_light+0x21a>
			break;
 800133c:	bf00      	nop
 800133e:	e000      	b.n	8001342 <traffic_light+0x21a>
			break;
 8001340:	bf00      	nop
	}
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000004b 	.word	0x2000004b
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011000 	.word	0x40011000
 8001354:	20000010 	.word	0x20000010
 8001358:	2000007c 	.word	0x2000007c
 800135c:	20000080 	.word	0x20000080

08001360 <setTimer0>:
#define TIME_CYCLE 	10

int timer0_counter = 1;
int timer0_flag = 0;

void setTimer0(int duration){
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIME_CYCLE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <setTimer0+0x2c>)
 800136c:	fb82 1203 	smull	r1, r2, r2, r3
 8001370:	1092      	asrs	r2, r2, #2
 8001372:	17db      	asrs	r3, r3, #31
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	4a06      	ldr	r2, [pc, #24]	; (8001390 <setTimer0+0x30>)
 8001378:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <setTimer0+0x34>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	66666667 	.word	0x66666667
 8001390:	2000001c 	.word	0x2000001c
 8001394:	20000088 	.word	0x20000088

08001398 <timerRun>:

void timerRun(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <timerRun+0x2c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd0b      	ble.n	80013bc <timerRun+0x24>
		timer0_counter--;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <timerRun+0x2c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <timerRun+0x2c>)
 80013ac:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <timerRun+0x2c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dc02      	bgt.n	80013bc <timerRun+0x24>
			timer0_flag = 1;
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <timerRun+0x30>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	2000001c 	.word	0x2000001c
 80013c8:	20000088 	.word	0x20000088

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_MspInit+0x5c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_MspInit+0x5c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_MspInit+0x5c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_MspInit+0x5c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_MspInit+0x60>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_MspInit+0x60>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000

08001430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001440:	d113      	bne.n	800146a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	201c      	movs	r0, #28
 8001460:	f000 f9b3 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001464:	201c      	movs	r0, #28
 8001466:	f000 f9cc 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014be:	f000 f891 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <TIM2_IRQHandler+0x10>)
 80014ce:	f000 ffe5 	bl	800249c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000008c 	.word	0x2000008c

080014dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_TIM_PeriodElapsedCallback>:
 */
#include "software_timer.h"
#include "main.h"
#include "input_reading.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f8:	d103      	bne.n	8001502 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80014fa:	f7ff fa8f 	bl	8000a1c <button_reading>
		timerRun();
 80014fe:	f7ff ff4b 	bl	8001398 <timerRun>
	}
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff ffe6 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001512:	490c      	ldr	r1, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001528:	4c09      	ldr	r4, [pc, #36]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f001 fb0d 	bl	8002b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fb07 	bl	8000b4c <main>
  bx lr
 800153e:	4770      	bx	lr
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001548:	08002bf0 	.word	0x08002bf0
  ldr r2, =_sbss
 800154c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001550:	200000d8 	.word	0x200000d8

08001554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f923 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	200f      	movs	r0, #15
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff ff2a 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f93b 	bl	800181e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f903 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000020 	.word	0x20000020
 80015dc:	20000028 	.word	0x20000028
 80015e0:	20000024 	.word	0x20000024

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000028 	.word	0x20000028
 8001604:	200000d4 	.word	0x200000d4

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	200000d4 	.word	0x200000d4

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <__NVIC_EnableIRQ+0x34>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff90 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff2d 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff42 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff35 	bl	8001680 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b08b      	sub	sp, #44	; 0x2c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e169      	b.n	8001b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800184c:	2201      	movs	r2, #1
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8158 	bne.w	8001b1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a9a      	ldr	r2, [pc, #616]	; (8001ad8 <HAL_GPIO_Init+0x2a0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d05e      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001874:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d875      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800187a:	4a98      	ldr	r2, [pc, #608]	; (8001adc <HAL_GPIO_Init+0x2a4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d058      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001880:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d86f      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001886:	4a96      	ldr	r2, [pc, #600]	; (8001ae0 <HAL_GPIO_Init+0x2a8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d052      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 800188c:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2a8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d869      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001892:	4a94      	ldr	r2, [pc, #592]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04c      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001898:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d863      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800189e:	4a92      	ldr	r2, [pc, #584]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d046      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 80018a4:	4a90      	ldr	r2, [pc, #576]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d85d      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d82a      	bhi.n	8001904 <HAL_GPIO_Init+0xcc>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d859      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <HAL_GPIO_Init+0x80>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	08001933 	.word	0x08001933
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	0800191f 	.word	0x0800191f
 80018c4:	08001961 	.word	0x08001961
 80018c8:	08001967 	.word	0x08001967
 80018cc:	08001967 	.word	0x08001967
 80018d0:	08001967 	.word	0x08001967
 80018d4:	08001967 	.word	0x08001967
 80018d8:	08001967 	.word	0x08001967
 80018dc:	08001967 	.word	0x08001967
 80018e0:	08001967 	.word	0x08001967
 80018e4:	08001967 	.word	0x08001967
 80018e8:	08001967 	.word	0x08001967
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001967 	.word	0x08001967
 80018f4:	08001967 	.word	0x08001967
 80018f8:	08001967 	.word	0x08001967
 80018fc:	08001915 	.word	0x08001915
 8001900:	08001929 	.word	0x08001929
 8001904:	4a79      	ldr	r2, [pc, #484]	; (8001aec <HAL_GPIO_Init+0x2b4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190a:	e02c      	b.n	8001966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e029      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e024      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3308      	adds	r3, #8
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e01f      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	330c      	adds	r3, #12
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e01a      	b.n	8001968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e013      	b.n	8001968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	611a      	str	r2, [r3, #16]
          break;
 8001952:	e009      	b.n	8001968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	615a      	str	r2, [r3, #20]
          break;
 800195e:	e003      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x130>
          break;
 8001966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d801      	bhi.n	8001972 <HAL_GPIO_Init+0x13a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_Init+0x13e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d802      	bhi.n	8001984 <HAL_GPIO_Init+0x14c>
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x152>
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	3b08      	subs	r3, #8
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	210f      	movs	r1, #15
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	431a      	orrs	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80b1 	beq.w	8001b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b8:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a4c      	ldr	r2, [pc, #304]	; (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d0:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_GPIO_Init+0x2bc>)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_GPIO_Init+0x1ec>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_GPIO_Init+0x2c4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1e8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3e      	ldr	r2, [pc, #248]	; (8001b00 <HAL_GPIO_Init+0x2c8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1e4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <HAL_GPIO_Init+0x2cc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1e0>
 8001a14:	2303      	movs	r3, #3
 8001a16:	e006      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a24:	2300      	movs	r3, #0
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a36:	492f      	ldr	r1, [pc, #188]	; (8001af4 <HAL_GPIO_Init+0x2bc>)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	492c      	ldr	r1, [pc, #176]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4928      	ldr	r1, [pc, #160]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	4922      	ldr	r1, [pc, #136]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	491e      	ldr	r1, [pc, #120]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4918      	ldr	r1, [pc, #96]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4914      	ldr	r1, [pc, #80]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d021      	beq.n	8001b0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e021      	b.n	8001b1a <HAL_GPIO_Init+0x2e2>
 8001ad6:	bf00      	nop
 8001ad8:	10320000 	.word	0x10320000
 8001adc:	10310000 	.word	0x10310000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	10120000 	.word	0x10120000
 8001aec:	10110000 	.word	0x10110000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40010800 	.word	0x40010800
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40011400 	.word	0x40011400
 8001b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_GPIO_Init+0x304>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	4909      	ldr	r1, [pc, #36]	; (8001b3c <HAL_GPIO_Init+0x304>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae8e 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	372c      	adds	r7, #44	; 0x2c
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	807b      	strh	r3, [r7, #2]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7e:	787b      	ldrb	r3, [r7, #1]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e26c      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8087 	beq.w	8001cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc0:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d00c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d112      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x12c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d168      	bne.n	8001ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e246      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x76>
 8001c08:	4b80      	ldr	r3, [pc, #512]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a7f      	ldr	r2, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e02e      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x98>
 8001c1e:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b78      	ldr	r3, [pc, #480]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0xbc>
 8001c42:	4b72      	ldr	r3, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a71      	ldr	r2, [pc, #452]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c5c:	4b6b      	ldr	r3, [pc, #428]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6a      	ldr	r2, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fcc4 	bl	8001608 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fcc0 	bl	8001608 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1fa      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xe4>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fcb0 	bl	8001608 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fcac 	bl	8001608 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1e6      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x10c>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cda:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
 8001cf2:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1ba      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4939      	ldr	r1, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fc65 	bl	8001608 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff fc61 	bl	8001608 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e19b      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4927      	ldr	r1, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fc44 	bl	8001608 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fc40 	bl	8001608 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e17a      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03a      	beq.n	8001e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d019      	beq.n	8001dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fc24 	bl	8001608 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fc20 	bl	8001608 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e15a      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 fa9a 	bl	800231c <RCC_Delay>
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fc0a 	bl	8001608 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fc06 	bl	8001608 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d908      	bls.n	8001e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e140      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	42420000 	.word	0x42420000
 8001e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e9      	bne.n	8001df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80a6 	beq.w	8001f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b97      	ldr	r3, [pc, #604]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b94      	ldr	r3, [pc, #592]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a93      	ldr	r2, [pc, #588]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b91      	ldr	r3, [pc, #580]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b8e      	ldr	r3, [pc, #568]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b8b      	ldr	r3, [pc, #556]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a8a      	ldr	r2, [pc, #552]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fbc7 	bl	8001608 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7ff fbc3 	bl	8001608 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0fd      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b81      	ldr	r3, [pc, #516]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x312>
 8001ea4:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a7a      	ldr	r2, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e02d      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x334>
 8001eba:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a75      	ldr	r2, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a72      	ldr	r2, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	e01c      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x356>
 8001edc:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a69      	ldr	r2, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a66      	ldr	r2, [pc, #408]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b64      	ldr	r3, [pc, #400]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fb77 	bl	8001608 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fb73 	bl	8001608 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0ab      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ee      	beq.n	8001f1e <HAL_RCC_OscConfig+0x37e>
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fb61 	bl	8001608 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fb5d 	bl	8001608 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e095      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8081 	beq.w	800208a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d061      	beq.n	8002058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d146      	bne.n	800202a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <HAL_RCC_OscConfig+0x4fc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fb31 	bl	8001608 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff fb2d 	bl	8001608 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e067      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	492d      	ldr	r1, [pc, #180]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a19      	ldr	r1, [r3, #32]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	4927      	ldr	r1, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_OscConfig+0x4fc>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7ff fb01 	bl	8001608 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200a:	f7ff fafd 	bl	8001608 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e037      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x46a>
 8002028:	e02f      	b.n	800208a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_RCC_OscConfig+0x4fc>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff faea 	bl	8001608 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff fae6 	bl	8001608 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e020      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x498>
 8002056:	e018      	b.n	800208a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e013      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
 800209c:	42420060 	.word	0x42420060

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4965      	ldr	r1, [pc, #404]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e073      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4936      	ldr	r1, [pc, #216]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff fa3a 	bl	8001608 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff fa36 	bl	8001608 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e053      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4922      	ldr	r1, [pc, #136]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f998 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
 8002268:	08002bc4 	.word	0x08002bc4
 800226c:	20000020 	.word	0x20000020
 8002270:	20000024 	.word	0x20000024

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e027      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e027      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0c5b      	lsrs	r3, r3, #17
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	fb02 f203 	mul.w	r2, r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	613b      	str	r3, [r7, #16]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	693b      	ldr	r3, [r7, #16]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	08002bd4 	.word	0x08002bd4
 8002314:	08002be4 	.word	0x08002be4
 8002318:	003d0900 	.word	0x003d0900

0800231c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <RCC_Delay+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <RCC_Delay+0x38>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0a5b      	lsrs	r3, r3, #9
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002338:	bf00      	nop
  }
  while (Delay --);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <RCC_Delay+0x1c>
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000020 	.word	0x20000020
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e041      	b.n	80023ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff f856 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f000 fa74 	bl	8002884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d001      	beq.n	8002410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e03a      	b.n	8002486 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_TIM_Base_Start_IT+0x98>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d009      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_TIM_Base_Start_IT+0x9c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_TIM_Base_Start_IT+0xa0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d111      	bne.n	8002474 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d010      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	e007      	b.n	8002484 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800

0800249c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0202 	mvn.w	r2, #2
 80024c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f9b4 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f9a7 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f9b6 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0204 	mvn.w	r2, #4
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f98a 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f97d 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f98c 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b08      	cmp	r3, #8
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b08      	cmp	r3, #8
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0208 	mvn.w	r2, #8
 8002570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2204      	movs	r2, #4
 8002576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f960 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f953 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f962 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d122      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d11b      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0210 	mvn.w	r2, #16
 80025c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2208      	movs	r2, #8
 80025ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f936 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80025e0:	e005      	b.n	80025ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f929 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f938 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0201 	mvn.w	r2, #1
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe ff64 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b80      	cmp	r3, #128	; 0x80
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa7b 	bl	8002b42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8fc 	bl	8002870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b20      	cmp	r3, #32
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b20      	cmp	r3, #32
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0220 	mvn.w	r2, #32
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fa46 	bl	8002b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_TIM_ConfigClockSource+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0b4      	b.n	8002832 <HAL_TIM_ConfigClockSource+0x186>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d03e      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0xd4>
 8002702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002706:	f200 8087 	bhi.w	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	f000 8086 	beq.w	800281e <HAL_TIM_ConfigClockSource+0x172>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002716:	d87f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b70      	cmp	r3, #112	; 0x70
 800271a:	d01a      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xa6>
 800271c:	2b70      	cmp	r3, #112	; 0x70
 800271e:	d87b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d050      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002724:	2b60      	cmp	r3, #96	; 0x60
 8002726:	d877      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b50      	cmp	r3, #80	; 0x50
 800272a:	d03c      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0xfa>
 800272c:	2b50      	cmp	r3, #80	; 0x50
 800272e:	d873      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d058      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d86f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b30      	cmp	r3, #48	; 0x30
 800273a:	d064      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	2b30      	cmp	r3, #48	; 0x30
 800273e:	d86b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d060      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d867      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05c      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b10      	cmp	r3, #16
 800274e:	d05a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	e062      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f000 f968 	bl	8002a36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	609a      	str	r2, [r3, #8]
      break;
 800277e:	e04f      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f000 f951 	bl	8002a36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a2:	609a      	str	r2, [r3, #8]
      break;
 80027a4:	e03c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 f8c8 	bl	8002948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2150      	movs	r1, #80	; 0x50
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f91f 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 80027c4:	e02c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f8e6 	bl	80029a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2160      	movs	r1, #96	; 0x60
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f90f 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 80027e4:	e01c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 f8a8 	bl	8002948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f8ff 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002804:	e00c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f000 f8f6 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002816:	e003      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e000      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800281e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <TIM_Base_SetConfig+0xb8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00b      	beq.n	80028b4 <TIM_Base_SetConfig+0x30>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d007      	beq.n	80028b4 <TIM_Base_SetConfig+0x30>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <TIM_Base_SetConfig+0xbc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <TIM_Base_SetConfig+0x30>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_Base_SetConfig+0xc0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d108      	bne.n	80028c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	; (800293c <TIM_Base_SetConfig+0xb8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <TIM_Base_SetConfig+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d007      	beq.n	80028e6 <TIM_Base_SetConfig+0x62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <TIM_Base_SetConfig+0xbc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d003      	beq.n	80028e6 <TIM_Base_SetConfig+0x62>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <TIM_Base_SetConfig+0xc0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d108      	bne.n	80028f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <TIM_Base_SetConfig+0xb8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d103      	bne.n	800292c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	615a      	str	r2, [r3, #20]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800

08002948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0201 	bic.w	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f023 030a 	bic.w	r3, r3, #10
 8002984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0210 	bic.w	r2, r3, #16
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	031b      	lsls	r3, r3, #12
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f043 0307 	orr.w	r3, r3, #7
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e046      	b.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00e      	beq.n	8002aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d009      	beq.n	8002aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d004      	beq.n	8002aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10c      	bne.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800

08002b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <__libc_init_array>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	2600      	movs	r6, #0
 8002b58:	4d0c      	ldr	r5, [pc, #48]	; (8002b8c <__libc_init_array+0x38>)
 8002b5a:	4c0d      	ldr	r4, [pc, #52]	; (8002b90 <__libc_init_array+0x3c>)
 8002b5c:	1b64      	subs	r4, r4, r5
 8002b5e:	10a4      	asrs	r4, r4, #2
 8002b60:	42a6      	cmp	r6, r4
 8002b62:	d109      	bne.n	8002b78 <__libc_init_array+0x24>
 8002b64:	f000 f822 	bl	8002bac <_init>
 8002b68:	2600      	movs	r6, #0
 8002b6a:	4d0a      	ldr	r5, [pc, #40]	; (8002b94 <__libc_init_array+0x40>)
 8002b6c:	4c0a      	ldr	r4, [pc, #40]	; (8002b98 <__libc_init_array+0x44>)
 8002b6e:	1b64      	subs	r4, r4, r5
 8002b70:	10a4      	asrs	r4, r4, #2
 8002b72:	42a6      	cmp	r6, r4
 8002b74:	d105      	bne.n	8002b82 <__libc_init_array+0x2e>
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7c:	4798      	blx	r3
 8002b7e:	3601      	adds	r6, #1
 8002b80:	e7ee      	b.n	8002b60 <__libc_init_array+0xc>
 8002b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b86:	4798      	blx	r3
 8002b88:	3601      	adds	r6, #1
 8002b8a:	e7f2      	b.n	8002b72 <__libc_init_array+0x1e>
 8002b8c:	08002be8 	.word	0x08002be8
 8002b90:	08002be8 	.word	0x08002be8
 8002b94:	08002be8 	.word	0x08002be8
 8002b98:	08002bec 	.word	0x08002bec

08002b9c <memset>:
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4402      	add	r2, r0
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d100      	bne.n	8002ba6 <memset+0xa>
 8002ba4:	4770      	bx	lr
 8002ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8002baa:	e7f9      	b.n	8002ba0 <memset+0x4>

08002bac <_init>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_fini>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr
